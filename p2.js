/*
 * Even Fibonacci numbers
 * Problem 2 
 * 
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
 * By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * 
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms.
 * 
 */

// idea, build a commentifier


// base cases are normally 1 and 1, but you could argue that 0 is also a fibo
// define array that will hold all found fibos
// so we don't have to find them again and again 

const fibos = [0, 1]; // this means that 0, 1 AND ANOTHER 1 are included!
let lastFibo = 1; 

function findNextFibo() {
    //sum of the last found fibo and the fibo before that one
    const nextFibo = fibos[lastFibo] + fibos[lastFibo - 1]
    //push it into fibos
    fibos.push(nextFibo)
    lastFibo++
}

function findFibos(num) {
    //find num fibos that are next
    for(let i = 0; i < num; i++) {
        findNextFibo()
    }
} 

while(fibos[lastFibo] <= 4000000){ // To do: is there a way to "predict" how many times we need to generate new fibos?
    findNextFibo()
}

//then to find the sum of all even fibos!
evenSum = fibos
    .filter(fibo => fibo % 2 === 0)
    .reduce( (prev, curr) => prev + curr ) 

console.log(evenSum) // >> *ANSWER*
